package org.emftext.refactoring.languages.^java.smell.android

import "http://www.emftext.org/java/classifiers";
import "http://www.emftext.org/java/references";
import "http://www.emftext.org/java/commons";
import "http://www.emftext.org/java/types";
import "http://www.emftext.org/java/variables";
import "http://www.emftext.org/java/expressions";
import "http://www.emftext.org/java/statements";
import "http://www.emftext.org/java/generics";
import "http://www.emftext.org/java/operators";
import "http://www.emftext.org/java/instantiations";
import "http://www.emftext.org/java/literals";

pattern UnTouchable(y){
	Class.^extends(actualClass, superClassRef);
	NamespaceClassifierReference.classifierReferences(superClassRef, classifierReference);
	ClassifierReference.target(classifierReference, superClass);
	find isActivity(superClass);
	
	find findDecimal(f,y);

	//find sizeFILL(showLPExpression, LPExpression, useRelativeLayout);
	//find sizeWRAP(showLPExpression, LPExpression, useRelativeLayout);
	//find sizeMATCH(showLPExpression, LPExpression, useRelativeLayout);
}
	
	pattern findDecimal(f,y) ={			//find Layoutparams with Integer values
	NewConstructorCall.typeReference(f,g);
	NamespaceClassifierReference.classifierReferences(g, c);
	ClassifierReference.target.name(c, "LayoutParams");
	NewConstructorCall.arguments(f,x);
	DecimalIntegerLiteral.decimalValue(x,y);
	}	
	
private pattern isActivity(class) {
	find isClassOf(class, "Activity");
}

private pattern isClassOf(class, className) {
	Class.name(class, className);
}

	//Optional Pattern to show elements to control the size
		private pattern sizeFILL(showLPExpression, LPExpression, useRelativeLayout){
	IdentifierReference.target.name(useRelativeLayout, "RelativeLayout");
	IdentifierReference.next(useRelativeLayout, LPExpression);
	IdentifierReference.target.name(LPExpression, "LayoutParams");
	IdentifierReference.next(LPExpression, showLPExpression);
	IdentifierReference.target.name(showLPExpression, "FILL_PARENT");}
	
		private pattern sizeWRAP(showLPExpression, LPExpression, useRelativeLayout){
	IdentifierReference.target.name(useRelativeLayout, "RelativeLayout");
	IdentifierReference.next(useRelativeLayout, LPExpression);
	IdentifierReference.target.name(LPExpression, "LayoutParams");
	IdentifierReference.next(LPExpression, showLPExpression);
	IdentifierReference.target.name(showLPExpression, "WRAP_CONTENT");}
	
		private pattern sizeMATCH(showLPExpression, LPExpression, useRelativeLayout){
	IdentifierReference.target.name(useRelativeLayout, "RelativeLayout");
	IdentifierReference.next(useRelativeLayout, LPExpression);
	IdentifierReference.target.name(LPExpression, "LayoutParams");
	IdentifierReference.next(LPExpression, showLPExpression);
	IdentifierReference.target.name(showLPExpression, "MATCH_PARENT");}

		pattern findDecimal3(x) ={					//find all Integervalues
	DecimalIntegerLiteral.decimalValue(b,x);
	}	