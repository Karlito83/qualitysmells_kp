package org.emftext.refactoring.languages.^java.smell.android

import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/variables"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/generics"
import "http://www.emftext.org/java/arrays"

pattern UnclosedCloseable(c:ClassMethod, t:OrdinaryParameter) ={
	
	neg find findClassParam(s);
	OrdinaryParameter.name(t,s);
	find findClass(c,t);
	
	
	
	}

pattern findClassParam(s) ={
	find findClose(s);
	ClassMethod.name(c,r);
	ClassMethod.parameters(c,t);
	ClassMethod.statements(c,h);


	}
	
pattern findClass(c,t) ={
	ClassMethod.name(c,r);
	ClassMethod.parameters(c,t);
	ClassMethod.statements(c,h);
	}


pattern findClose(t) ={
	ExpressionStatement.expression(a,exp);
	IdentifierReference.target.name(exp, t);
	IdentifierReference.next(exp, exp2);
	MethodCall.target.name(exp2, "close");
	}
	
pattern findCloseable(dev:NamespaceClassifierReference) ={
	NamespaceClassifierReference.classifierReferences(dev, a);
	ClassifierReference.target.name(a, "Closeable");
	}

	pattern findCloseableParam(t){
        OrdinaryParameter.typeReference(t,s);
        NamespaceClassifierReference.classifierReferences(s,r);
        ClassifierReference.target(r,a);
        Interface.name(a,"Closeable");
        find ImplementsOrExtends(a,b);
}