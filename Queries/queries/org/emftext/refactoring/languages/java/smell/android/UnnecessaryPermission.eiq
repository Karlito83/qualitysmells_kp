package org.emftext.refactoring.languages.^java.smell.android

import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/variables"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/references";
import "http://www.emftext.org/java/expressions";
import "http://www.emftext.org/java/generics";
import "http://www.emftext.org/java/operators";
import "http://www.emftext.org/java/instantiations";
import "http://www.emftext.org/java/literals";






pattern UnnecessaryPermission(field:Field){
	Class.^extends(actualClass, superClassRef);
	NamespaceClassifierReference.classifierReferences(superClassRef, classifierReference);
	ClassifierReference.target(classifierReference, superClass);
	find isActivity(superClass);
	find useSMS(field);} 
	//or {find useContact(field, field2); }
	//or {find useSMS(field, field2);}
	
	//Class.members(actualClass, method);
	//find parentContainsSomething+(method, expression);
//}

 pattern useSMS(f,x, y) ={
 	NewConstructorCall.typeReference(f,g);
	NamespaceClassifierReference.classifierReferences(g,c);
	ClassifierReference.target.name(c, "Intent");
	NewConstructorCall.arguments(f,x);
	IdentifierReference.next(x,z);
	IdentifierReference.target.name(z,y);
	}	
	

private pattern isActivity(class) {
	find isClassOf(class, "Activity");
}

private pattern isClassOf(class, className) {
	Class.name(class, className);
}

