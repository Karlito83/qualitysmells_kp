package org.emftext.refactoring.languages.java.smell.android

import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/variables"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/instantiations"
//import "http://www.emftext.org/commons/layout"

pattern unTouchable(expression:ExpressionStatement){
	Class.^extends(actualClass, superClassRef);
	NamespaceClassifierReference.classifierReferences(superClassRef, classifierReference);
	ClassifierReference.target(classifierReference, superClass);

	find itemSize(expression);
	Class.members(actualClass, method);
	find parentContainsSomething+(method, expression);
}

private pattern itemSize(expression) {
	ExpressionStatement.expression(expression, _);
	IdentifierReference.target.name(layoutHeight, "layout_height");} or {
	ExpressionStatement.expression(expression, _);
	IdentifierReference.target.name(layoutWidth, "layout_width");	
	}

private pattern parentContainsSomething(parent, child){
	LocalVariableStatement.variable(parent, child);
} or {
	StatementListContainer.statements(parent, child);
}
