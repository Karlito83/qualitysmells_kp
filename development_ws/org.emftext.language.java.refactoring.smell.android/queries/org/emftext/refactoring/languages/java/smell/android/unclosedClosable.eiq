package org.emftext.refactoring.languages.^java.smell.android

import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/variables"
import "http://www.emftext.org/java/statements"


pattern unnecessaryClosable(expression:ExpressionStatement){
	Class.^extends(actualClass, superClassRef);
	NamespaceClassifierReference.classifierReferences(superClassRef, classifierReference);
	ClassifierReference.target(classifierReference, superClass);
	find isClosable(superClass);	//Klassenimport finden
	
	find containsClosable(expression);	//Closable Aufruf finden
	find containsClose(expression);		//close() finden
}

private pattern containsClosable(expression) {
	ExpressionStatement.expression(expression, containsClosable);
	IdentifierReference.target.name(containsClosable, "Closable");
	}
	
private pattern containsClose(expression) {
	ExpressionStatement.expression(expression, containsClosable);
	IdentifierReference.target.name(containsClosable, "close()");
	}
	
private pattern isClosable(class) {
	find isClassOf(class, "Closable");
}

private pattern isClassOf(class, className) {
	Class.name(class, className);
}